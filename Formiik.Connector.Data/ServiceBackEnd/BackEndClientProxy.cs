//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Emlink.Pitzotl.BackEndPipe.DataContracts
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HashTableCompositeType", Namespace="http://schemas.datacontract.org/2004/07/Emlink.Pitzotl.BackEndPipe.DataContracts")]
    public partial class HashTableCompositeType : object
    {
        
        private string KeyField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key
        {
            get
            {
                return this.KeyField;
            }
            set
            {
                this.KeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NewUser", Namespace="http://schemas.datacontract.org/2004/07/Emlink.Pitzotl.BackEndPipe.DataContracts")]
    public partial class NewUser : object
    {
        
        private string ClientIdField;
        
        private string GroupIdField;
        
        private string NameField;
        
        private string PasswordField;
        
        private string[] ProcessIdsField;
        
        private string RoleIdField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientId
        {
            get
            {
                return this.ClientIdField;
            }
            set
            {
                this.ClientIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupId
        {
            get
            {
                return this.GroupIdField;
            }
            set
            {
                this.GroupIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ProcessIds
        {
            get
            {
                return this.ProcessIdsField;
            }
            set
            {
                this.ProcessIdsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleId
        {
            get
            {
                return this.RoleIdField;
            }
            set
            {
                this.RoleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username
        {
            get
            {
                return this.UsernameField;
            }
            set
            {
                this.UsernameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/Emlink.Pitzotl.BackEndPipe.DataContracts")]
    public partial class UserInfo : object
    {
        
        private string ClientIdField;
        
        private string GroupExternalIdField;
        
        private string NameField;
        
        private string PasswordField;
        
        private string[] ProcessIdsField;
        
        private string RoleIdField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientId
        {
            get
            {
                return this.ClientIdField;
            }
            set
            {
                this.ClientIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupExternalId
        {
            get
            {
                return this.GroupExternalIdField;
            }
            set
            {
                this.GroupExternalIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ProcessIds
        {
            get
            {
                return this.ProcessIdsField;
            }
            set
            {
                this.ProcessIdsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleId
        {
            get
            {
                return this.RoleIdField;
            }
            set
            {
                this.RoleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username
        {
            get
            {
                return this.UsernameField;
            }
            set
            {
                this.UsernameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryRequest", Namespace="http://schemas.datacontract.org/2004/07/Emlink.Pitzotl.BackEndPipe.DataContracts")]
    public partial class QueryRequest : object
    {
        
        private string FormatField;
        
        private System.Collections.Generic.Dictionary<string, string> ParametersField;
        
        private string QueryIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Format
        {
            get
            {
                return this.FormatField;
            }
            set
            {
                this.FormatField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Parameters
        {
            get
            {
                return this.ParametersField;
            }
            set
            {
                this.ParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryId
        {
            get
            {
                return this.QueryIdField;
            }
            set
            {
                this.QueryIdField = value;
            }
        }
    }
}
namespace Mobiik.Formiik.Domain.Entities
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserActiveService", Namespace="http://schemas.datacontract.org/2004/07/Mobiik.Formiik.Domain.Entities")]
    public partial class UserActiveService : object
    {
        
        private string GroupExternalField;
        
        private System.Guid GroupIdField;
        
        private string GroupInternalField;
        
        private System.Guid IdRoleField;
        
        private System.Guid IdUserField;
        
        private string ProductsField;
        
        private string RoleNameField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupExternal
        {
            get
            {
                return this.GroupExternalField;
            }
            set
            {
                this.GroupExternalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GroupId
        {
            get
            {
                return this.GroupIdField;
            }
            set
            {
                this.GroupIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupInternal
        {
            get
            {
                return this.GroupInternalField;
            }
            set
            {
                this.GroupInternalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid IdRole
        {
            get
            {
                return this.IdRoleField;
            }
            set
            {
                this.IdRoleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid IdUser
        {
            get
            {
                return this.IdUserField;
            }
            set
            {
                this.IdUserField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Products
        {
            get
            {
                return this.ProductsField;
            }
            set
            {
                this.ProductsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleName
        {
            get
            {
                return this.RoleNameField;
            }
            set
            {
                this.RoleNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.3")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IBackEnd")]
public interface IBackEnd
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddNewWorkOrderToUserName", ReplyAction="http://tempuri.org/IBackEnd/AddNewWorkOrderToUserNameResponse")]
    System.Threading.Tasks.Task<string> AddNewWorkOrderToUserNameAsync(string id, string clientId, string productId, string type, string version, string userName, int priority, string expirationDate, string cancellationDate, Emlink.Pitzotl.BackEndPipe.DataContracts.HashTableCompositeType[] parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddWorkOrdersXML", ReplyAction="http://tempuri.org/IBackEnd/AddWorkOrdersXMLResponse")]
    System.Threading.Tasks.Task AddWorkOrdersXMLAsync(string clientId, string productId, string workOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddWorkOrdersXMLId", ReplyAction="http://tempuri.org/IBackEnd/AddWorkOrdersXMLIdResponse")]
    System.Threading.Tasks.Task<string> AddWorkOrdersXMLIdAsync(string clientId, string productId, string workOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/ReassignWorkOrdersXMLId", ReplyAction="http://tempuri.org/IBackEnd/ReassignWorkOrdersXMLIdResponse")]
    System.Threading.Tasks.Task<string> ReassignWorkOrdersXMLIdAsync(string clientId, string productId, string workOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/ReassignWorkOrdersXMLIdSync", ReplyAction="http://tempuri.org/IBackEnd/ReassignWorkOrdersXMLIdSyncResponse")]
    System.Threading.Tasks.Task ReassignWorkOrdersXMLIdSyncAsync(string clientId, string productId, string workOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrder", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrderResponse")]
    System.Threading.Tasks.Task<string> CancelWorkOrderAsync(string id, string clientId, string productId, string userName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersXML", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersXMLResponse")]
    System.Threading.Tasks.Task CancelWorkOrdersXMLAsync(string clientId, string productId, string cancelOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersXMLId", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersXMLIdResponse")]
    System.Threading.Tasks.Task<string> CancelWorkOrdersXMLIdAsync(string clientId, string productId, string cancelOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersByUser", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersByUserResponse")]
    System.Threading.Tasks.Task<int> CancelWorkOrdersByUserAsync(string clientId, string username);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersByDateRange", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersByDateRangeResponse")]
    System.Threading.Tasks.Task<int> CancelWorkOrdersByDateRangeAsync(string clientId, string productId, string externalType, string dateFrom, string dateTo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateWorkOrdersXML", ReplyAction="http://tempuri.org/IBackEnd/UpdateWorkOrdersXMLResponse")]
    System.Threading.Tasks.Task UpdateWorkOrdersXMLAsync(string clientId, string productId, string workOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateWorkOrdersXMLId", ReplyAction="http://tempuri.org/IBackEnd/UpdateWorkOrdersXMLIdResponse")]
    System.Threading.Tasks.Task<string> UpdateWorkOrdersXMLIdAsync(string clientId, string productId, string workOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateExistsWorkOrdersId", ReplyAction="http://tempuri.org/IBackEnd/UpdateExistsWorkOrdersIdResponse")]
    System.Threading.Tasks.Task<string> UpdateExistsWorkOrdersIdAsync(string clientId, string productId, string workOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/QueueMessageToUserName", ReplyAction="http://tempuri.org/IBackEnd/QueueMessageToUserNameResponse")]
    System.Threading.Tasks.Task<string> QueueMessageToUserNameAsync(string clientId, string productId, string userName, string sender, string content, bool isImportant);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/QueueMessageToUserNames", ReplyAction="http://tempuri.org/IBackEnd/QueueMessageToUserNamesResponse")]
    System.Threading.Tasks.Task<string> QueueMessageToUserNamesAsync(string cliendId, string productId, string[] userNames, string sender, string content, bool isImportant);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/ListenerUserMessages", ReplyAction="http://tempuri.org/IBackEnd/ListenerUserMessagesResponse")]
    System.Threading.Tasks.Task<bool> ListenerUserMessagesAsync(string clientId, string userName, bool listen);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUserCatalogs", ReplyAction="http://tempuri.org/IBackEnd/SetUserCatalogsResponse")]
    System.Threading.Tasks.Task SetUserCatalogsAsync(string clientId, string users, string catalogDefinition);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUser", ReplyAction="http://tempuri.org/IBackEnd/SetUserResponse")]
    System.Threading.Tasks.Task<string> SetUserAsync(string clientId, string username, string password, string idrole, string groupid, string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteUsers", ReplyAction="http://tempuri.org/IBackEnd/DeleteUsersResponse")]
    System.Threading.Tasks.Task DeleteUsersAsync(string client, string users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUserComplete", ReplyAction="http://tempuri.org/IBackEnd/SetUserCompleteResponse")]
    System.Threading.Tasks.Task<string> SetUserCompleteAsync(Emlink.Pitzotl.BackEndPipe.DataContracts.NewUser user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteUser", ReplyAction="http://tempuri.org/IBackEnd/DeleteUserResponse")]
    System.Threading.Tasks.Task<bool> DeleteUserAsync(string clientId, string username);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddUser", ReplyAction="http://tempuri.org/IBackEnd/AddUserResponse")]
    System.Threading.Tasks.Task<bool> AddUserAsync(Emlink.Pitzotl.BackEndPipe.DataContracts.UserInfo user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateUser", ReplyAction="http://tempuri.org/IBackEnd/UpdateUserResponse")]
    System.Threading.Tasks.Task<bool> UpdateUserAsync(Emlink.Pitzotl.BackEndPipe.DataContracts.UserInfo user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetGroup", ReplyAction="http://tempuri.org/IBackEnd/SetGroupResponse")]
    System.Threading.Tasks.Task<bool> SetGroupAsync(string clientId, string groupName, string groupExternalId, string parentGroupExternalId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateGroup", ReplyAction="http://tempuri.org/IBackEnd/UpdateGroupResponse")]
    System.Threading.Tasks.Task<bool> UpdateGroupAsync(string clientId, string groupName, string groupExternalId, string parentGroupExternalId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUsersGroups", ReplyAction="http://tempuri.org/IBackEnd/SetUsersGroupsResponse")]
    System.Threading.Tasks.Task SetUsersGroupsAsync(string clientId, string xmlGroups);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteGroup", ReplyAction="http://tempuri.org/IBackEnd/DeleteGroupResponse")]
    System.Threading.Tasks.Task<bool> DeleteGroupAsync(string clientId, string groupExternalId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteResponses", ReplyAction="http://tempuri.org/IBackEnd/DeleteResponsesResponse")]
    System.Threading.Tasks.Task DeleteResponsesAsync(string clientId, string productId, string externalIds);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetSecurityToken", ReplyAction="http://tempuri.org/IBackEnd/GetSecurityTokenResponse")]
    System.Threading.Tasks.Task<string> GetSecurityTokenAsync(string clientId, string username, string password);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetActiveUsersList", ReplyAction="http://tempuri.org/IBackEnd/GetActiveUsersListResponse")]
    System.Threading.Tasks.Task<Mobiik.Formiik.Domain.Entities.UserActiveService[]> GetActiveUsersListAsync(string idClient);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CloudTime", ReplyAction="http://tempuri.org/IBackEnd/CloudTimeResponse")]
    System.Threading.Tasks.Task<string> CloudTimeAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetData", ReplyAction="http://tempuri.org/IBackEnd/GetDataResponse")]
    System.Threading.Tasks.Task<string> GetDataAsync(string clientId, Emlink.Pitzotl.BackEndPipe.DataContracts.QueryRequest queryRequest);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetUsersLastLoginAndVersion", ReplyAction="http://tempuri.org/IBackEnd/GetUsersLastLoginAndVersionResponse")]
    System.Threading.Tasks.Task<string> GetUsersLastLoginAndVersionAsync(string clientId, string users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetUserActivity", ReplyAction="http://tempuri.org/IBackEnd/GetUserActivityResponse")]
    System.Threading.Tasks.Task<string> GetUserActivityAsync(string client, string users, string initialDate, string finalDate);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetResponses", ReplyAction="http://tempuri.org/IBackEnd/GetResponsesResponse")]
    System.Threading.Tasks.Task<string> GetResponsesAsync(string clientId, string productId, string Date, string users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetResponsesByPeriod", ReplyAction="http://tempuri.org/IBackEnd/GetResponsesByPeriodResponse")]
    System.Threading.Tasks.Task<string> GetResponsesByPeriodAsync(string clientId, string productId, string iniDate, string finDate, string users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetStatusForExternalId", ReplyAction="http://tempuri.org/IBackEnd/GetStatusForExternalIdResponse")]
    System.Threading.Tasks.Task<string> GetStatusForExternalIdAsync(string clientId, string productId, string externalId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetResponsesSentToClient", ReplyAction="http://tempuri.org/IBackEnd/GetResponsesSentToClientResponse")]
    System.Threading.Tasks.Task<string> GetResponsesSentToClientAsync(string clientId, string productId, string date, string users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetWorkOrderHistoryByExternalIds", ReplyAction="http://tempuri.org/IBackEnd/GetWorkOrderHistoryByExternalIdsResponse")]
    System.Threading.Tasks.Task<string> GetWorkOrderHistoryByExternalIdsAsync(string clientId, string externalIds);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetWorkOrdersStateByExternalIds", ReplyAction="http://tempuri.org/IBackEnd/GetWorkOrdersStateByExternalIdsResponse")]
    System.Threading.Tasks.Task<string> GetWorkOrdersStateByExternalIdsAsync(string clientId, string externalIds);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetWorkOrderStatesByPeriodAndProcess", ReplyAction="http://tempuri.org/IBackEnd/GetWorkOrderStatesByPeriodAndProcessResponse")]
    System.Threading.Tasks.Task<string> GetWorkOrderStatesByPeriodAndProcessAsync(string clientId, string parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CleanAttachments", ReplyAction="http://tempuri.org/IBackEnd/CleanAttachmentsResponse")]
    System.Threading.Tasks.Task CleanAttachmentsAsync(string clientId, string productId, string externalId, string assignedTo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetLatitudeAndLongitude", ReplyAction="http://tempuri.org/IBackEnd/GetLatitudeAndLongitudeResponse")]
    System.Threading.Tasks.Task<string> GetLatitudeAndLongitudeAsync(string address);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SendWorkOrderToClient", ReplyAction="http://tempuri.org/IBackEnd/SendWorkOrderToClientResponse")]
    System.Threading.Tasks.Task<bool> SendWorkOrderToClientAsync(string workOrderId, string response);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/ReporteErrores", ReplyAction="http://tempuri.org/IBackEnd/ReporteErroresResponse")]
    System.Threading.Tasks.Task<bool> ReporteErroresAsync(string error);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.3")]
public interface IBackEndChannel : IBackEnd, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.3")]
public partial class BackEndClient : System.ServiceModel.ClientBase<IBackEnd>, IBackEnd
{
    
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
    
    public BackEndClient(EndpointConfiguration endpointConfiguration) : 
            base(BackEndClient.GetBindingForEndpoint(endpointConfiguration), BackEndClient.GetEndpointAddress(endpointConfiguration))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public BackEndClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
            base(BackEndClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public BackEndClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(BackEndClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public BackEndClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Threading.Tasks.Task<string> AddNewWorkOrderToUserNameAsync(string id, string clientId, string productId, string type, string version, string userName, int priority, string expirationDate, string cancellationDate, Emlink.Pitzotl.BackEndPipe.DataContracts.HashTableCompositeType[] parameters)
    {
        return base.Channel.AddNewWorkOrderToUserNameAsync(id, clientId, productId, type, version, userName, priority, expirationDate, cancellationDate, parameters);
    }
    
    public System.Threading.Tasks.Task AddWorkOrdersXMLAsync(string clientId, string productId, string workOrders)
    {
        return base.Channel.AddWorkOrdersXMLAsync(clientId, productId, workOrders);
    }
    
    public System.Threading.Tasks.Task<string> AddWorkOrdersXMLIdAsync(string clientId, string productId, string workOrders)
    {
        return base.Channel.AddWorkOrdersXMLIdAsync(clientId, productId, workOrders);
    }
    
    public System.Threading.Tasks.Task<string> ReassignWorkOrdersXMLIdAsync(string clientId, string productId, string workOrders)
    {
        return base.Channel.ReassignWorkOrdersXMLIdAsync(clientId, productId, workOrders);
    }
    
    public System.Threading.Tasks.Task ReassignWorkOrdersXMLIdSyncAsync(string clientId, string productId, string workOrders)
    {
        return base.Channel.ReassignWorkOrdersXMLIdSyncAsync(clientId, productId, workOrders);
    }
    
    public System.Threading.Tasks.Task<string> CancelWorkOrderAsync(string id, string clientId, string productId, string userName)
    {
        return base.Channel.CancelWorkOrderAsync(id, clientId, productId, userName);
    }
    
    public System.Threading.Tasks.Task CancelWorkOrdersXMLAsync(string clientId, string productId, string cancelOrders)
    {
        return base.Channel.CancelWorkOrdersXMLAsync(clientId, productId, cancelOrders);
    }
    
    public System.Threading.Tasks.Task<string> CancelWorkOrdersXMLIdAsync(string clientId, string productId, string cancelOrders)
    {
        return base.Channel.CancelWorkOrdersXMLIdAsync(clientId, productId, cancelOrders);
    }
    
    public System.Threading.Tasks.Task<int> CancelWorkOrdersByUserAsync(string clientId, string username)
    {
        return base.Channel.CancelWorkOrdersByUserAsync(clientId, username);
    }
    
    public System.Threading.Tasks.Task<int> CancelWorkOrdersByDateRangeAsync(string clientId, string productId, string externalType, string dateFrom, string dateTo)
    {
        return base.Channel.CancelWorkOrdersByDateRangeAsync(clientId, productId, externalType, dateFrom, dateTo);
    }
    
    public System.Threading.Tasks.Task UpdateWorkOrdersXMLAsync(string clientId, string productId, string workOrders)
    {
        return base.Channel.UpdateWorkOrdersXMLAsync(clientId, productId, workOrders);
    }
    
    public System.Threading.Tasks.Task<string> UpdateWorkOrdersXMLIdAsync(string clientId, string productId, string workOrders)
    {
        return base.Channel.UpdateWorkOrdersXMLIdAsync(clientId, productId, workOrders);
    }
    
    public System.Threading.Tasks.Task<string> UpdateExistsWorkOrdersIdAsync(string clientId, string productId, string workOrders)
    {
        return base.Channel.UpdateExistsWorkOrdersIdAsync(clientId, productId, workOrders);
    }
    
    public System.Threading.Tasks.Task<string> QueueMessageToUserNameAsync(string clientId, string productId, string userName, string sender, string content, bool isImportant)
    {
        return base.Channel.QueueMessageToUserNameAsync(clientId, productId, userName, sender, content, isImportant);
    }
    
    public System.Threading.Tasks.Task<string> QueueMessageToUserNamesAsync(string cliendId, string productId, string[] userNames, string sender, string content, bool isImportant)
    {
        return base.Channel.QueueMessageToUserNamesAsync(cliendId, productId, userNames, sender, content, isImportant);
    }
    
    public System.Threading.Tasks.Task<bool> ListenerUserMessagesAsync(string clientId, string userName, bool listen)
    {
        return base.Channel.ListenerUserMessagesAsync(clientId, userName, listen);
    }
    
    public System.Threading.Tasks.Task SetUserCatalogsAsync(string clientId, string users, string catalogDefinition)
    {
        return base.Channel.SetUserCatalogsAsync(clientId, users, catalogDefinition);
    }
    
    public System.Threading.Tasks.Task<string> SetUserAsync(string clientId, string username, string password, string idrole, string groupid, string name)
    {
        return base.Channel.SetUserAsync(clientId, username, password, idrole, groupid, name);
    }
    
    public System.Threading.Tasks.Task DeleteUsersAsync(string client, string users)
    {
        return base.Channel.DeleteUsersAsync(client, users);
    }
    
    public System.Threading.Tasks.Task<string> SetUserCompleteAsync(Emlink.Pitzotl.BackEndPipe.DataContracts.NewUser user)
    {
        return base.Channel.SetUserCompleteAsync(user);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteUserAsync(string clientId, string username)
    {
        return base.Channel.DeleteUserAsync(clientId, username);
    }
    
    public System.Threading.Tasks.Task<bool> AddUserAsync(Emlink.Pitzotl.BackEndPipe.DataContracts.UserInfo user)
    {
        return base.Channel.AddUserAsync(user);
    }
    
    public System.Threading.Tasks.Task<bool> UpdateUserAsync(Emlink.Pitzotl.BackEndPipe.DataContracts.UserInfo user)
    {
        return base.Channel.UpdateUserAsync(user);
    }
    
    public System.Threading.Tasks.Task<bool> SetGroupAsync(string clientId, string groupName, string groupExternalId, string parentGroupExternalId)
    {
        return base.Channel.SetGroupAsync(clientId, groupName, groupExternalId, parentGroupExternalId);
    }
    
    public System.Threading.Tasks.Task<bool> UpdateGroupAsync(string clientId, string groupName, string groupExternalId, string parentGroupExternalId)
    {
        return base.Channel.UpdateGroupAsync(clientId, groupName, groupExternalId, parentGroupExternalId);
    }
    
    public System.Threading.Tasks.Task SetUsersGroupsAsync(string clientId, string xmlGroups)
    {
        return base.Channel.SetUsersGroupsAsync(clientId, xmlGroups);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteGroupAsync(string clientId, string groupExternalId)
    {
        return base.Channel.DeleteGroupAsync(clientId, groupExternalId);
    }
    
    public System.Threading.Tasks.Task DeleteResponsesAsync(string clientId, string productId, string externalIds)
    {
        return base.Channel.DeleteResponsesAsync(clientId, productId, externalIds);
    }
    
    public System.Threading.Tasks.Task<string> GetSecurityTokenAsync(string clientId, string username, string password)
    {
        return base.Channel.GetSecurityTokenAsync(clientId, username, password);
    }
    
    public System.Threading.Tasks.Task<Mobiik.Formiik.Domain.Entities.UserActiveService[]> GetActiveUsersListAsync(string idClient)
    {
        return base.Channel.GetActiveUsersListAsync(idClient);
    }
    
    public System.Threading.Tasks.Task<string> CloudTimeAsync()
    {
        return base.Channel.CloudTimeAsync();
    }
    
    public System.Threading.Tasks.Task<string> GetDataAsync(string clientId, Emlink.Pitzotl.BackEndPipe.DataContracts.QueryRequest queryRequest)
    {
        return base.Channel.GetDataAsync(clientId, queryRequest);
    }
    
    public System.Threading.Tasks.Task<string> GetUsersLastLoginAndVersionAsync(string clientId, string users)
    {
        return base.Channel.GetUsersLastLoginAndVersionAsync(clientId, users);
    }
    
    public System.Threading.Tasks.Task<string> GetUserActivityAsync(string client, string users, string initialDate, string finalDate)
    {
        return base.Channel.GetUserActivityAsync(client, users, initialDate, finalDate);
    }
    
    public System.Threading.Tasks.Task<string> GetResponsesAsync(string clientId, string productId, string Date, string users)
    {
        return base.Channel.GetResponsesAsync(clientId, productId, Date, users);
    }
    
    public System.Threading.Tasks.Task<string> GetResponsesByPeriodAsync(string clientId, string productId, string iniDate, string finDate, string users)
    {
        return base.Channel.GetResponsesByPeriodAsync(clientId, productId, iniDate, finDate, users);
    }
    
    public System.Threading.Tasks.Task<string> GetStatusForExternalIdAsync(string clientId, string productId, string externalId)
    {
        return base.Channel.GetStatusForExternalIdAsync(clientId, productId, externalId);
    }
    
    public System.Threading.Tasks.Task<string> GetResponsesSentToClientAsync(string clientId, string productId, string date, string users)
    {
        return base.Channel.GetResponsesSentToClientAsync(clientId, productId, date, users);
    }
    
    public System.Threading.Tasks.Task<string> GetWorkOrderHistoryByExternalIdsAsync(string clientId, string externalIds)
    {
        return base.Channel.GetWorkOrderHistoryByExternalIdsAsync(clientId, externalIds);
    }
    
    public System.Threading.Tasks.Task<string> GetWorkOrdersStateByExternalIdsAsync(string clientId, string externalIds)
    {
        return base.Channel.GetWorkOrdersStateByExternalIdsAsync(clientId, externalIds);
    }
    
    public System.Threading.Tasks.Task<string> GetWorkOrderStatesByPeriodAndProcessAsync(string clientId, string parameters)
    {
        return base.Channel.GetWorkOrderStatesByPeriodAndProcessAsync(clientId, parameters);
    }
    
    public System.Threading.Tasks.Task CleanAttachmentsAsync(string clientId, string productId, string externalId, string assignedTo)
    {
        return base.Channel.CleanAttachmentsAsync(clientId, productId, externalId, assignedTo);
    }
    
    public System.Threading.Tasks.Task<string> GetLatitudeAndLongitudeAsync(string address)
    {
        return base.Channel.GetLatitudeAndLongitudeAsync(address);
    }
    
    public System.Threading.Tasks.Task<bool> SendWorkOrderToClientAsync(string workOrderId, string response)
    {
        return base.Channel.SendWorkOrderToClientAsync(workOrderId, response);
    }
    
    public System.Threading.Tasks.Task<bool> ReporteErroresAsync(string error)
    {
        return base.Channel.ReporteErroresAsync(error);
    }
    
    public virtual System.Threading.Tasks.Task OpenAsync()
    {
        return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
    }
    
    public virtual System.Threading.Tasks.Task CloseAsync()
    {
        return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
    }
    
    private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBackEnd))
        {
            System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
            result.MaxBufferSize = int.MaxValue;
            result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
            result.MaxReceivedMessageSize = int.MaxValue;
            result.AllowCookies = true;
            return result;
        }
        if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBackEnd1))
        {
            System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
            result.MaxBufferSize = int.MaxValue;
            result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
            result.MaxReceivedMessageSize = int.MaxValue;
            result.AllowCookies = true;
            result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
            return result;
        }
        throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }
    
    private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBackEnd))
        {
            //RC
            //return new System.ServiceModel.EndpointAddress("http://rc.formiik.com:8081/BackEnd.svc");
            return new System.ServiceModel.EndpointAddress("http://app.formiik.com:8081/BackEnd.svc");
        }
        if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBackEnd1))
        {
            //RC
            //return new System.ServiceModel.EndpointAddress("https://rc.formiik.com:8084/BackEnd.svc");
            return new System.ServiceModel.EndpointAddress("https://app.formiik.com:8084/BackEnd.svc");
        }
        throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }
    
    public enum EndpointConfiguration
    {
        
        BasicHttpBinding_IBackEnd,
        
        BasicHttpBinding_IBackEnd1,
    }
}
